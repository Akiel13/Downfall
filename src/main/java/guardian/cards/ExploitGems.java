package guardian.cards;

import com.megacrit.cardcrawl.actions.common.DrawCardAction;
import com.megacrit.cardcrawl.actions.common.GainEnergyAction;
import com.megacrit.cardcrawl.cards.AbstractCard;
import com.megacrit.cardcrawl.cards.CardQueueItem;
import com.megacrit.cardcrawl.characters.AbstractPlayer;
import com.megacrit.cardcrawl.core.CardCrawlGame;
import com.megacrit.cardcrawl.core.Settings;
import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
import com.megacrit.cardcrawl.localization.CardStrings;
import com.megacrit.cardcrawl.monsters.AbstractMonster;
import guardian.GuardianMod;
import guardian.orbs.StasisOrb;
import guardian.patches.AbstractCardEnum;
import sneckomod.SneckoMod;

import static guardian.GuardianMod.makeBetaCardPath;

public class ExploitGems extends AbstractGuardianCard implements InStasisCard {
    public static final String ID = GuardianMod.makeID("ExploitGems");
    private static final CardStrings cardStrings = CardCrawlGame.languagePack.getCardStrings(ID);
    public static final String NAME = cardStrings.NAME;
    public static final String DESCRIPTION = cardStrings.DESCRIPTION;
    public static final String UPGRADED_DESCRIPTION = cardStrings.UPGRADE_DESCRIPTION;
    public static final String IMG_PATH = "cards/exploitGems.png";
    private static final CardType TYPE = CardType.SKILL;
    private static final CardRarity RARITY = CardRarity.RARE;
    private static final CardTarget TARGET = CardTarget.SELF;
    private static final int COST = 0;

    // Tuning Constants
    private static final int SOCKETS = 2;
    private static final boolean SOCKETS_ARE_AFTER = true;

    public ExploitGems() {
        super(ID, NAME, GuardianMod.getResourcePath(IMG_PATH), COST, DESCRIPTION, TYPE, AbstractCardEnum.GUARDIAN, RARITY, TARGET);
        this.socketCount = SOCKETS;
        updateDescription();
        //this.tags.add(SneckoMod.BANNEDFORSNECKO);
        loadGemMisc();
        GuardianMod.loadJokeCardImage(this, makeBetaCardPath("ExploitGems.png"));
    }

    public void use(AbstractPlayer p, AbstractMonster m) {
        AbstractDungeon.actionManager.addToBottom(new DrawCardAction(p, 1));
        super.useGems(p, m);
    }

    public AbstractCard makeCopy() {
        return new ExploitGems();
    }

    public void upgrade() {
        if (!this.upgraded) {
            upgradeName();
            if (this.socketCount < 4) {
                this.socketCount++;
                this.saveGemMisc();
            }
            updateDescription();
        }
    }

    public void updateDescription() {
        this.rawDescription = this.updateGemDescription(DESCRIPTION, true);
        this.initializeDescription();
    }

}
